class Solution {
    public int[] kWeakestRows(int[][] mat, int k) {
        // calculate rows and columns
        int rows = mat.length;
        int cols = mat[0].length;
        
        //ans to return
        int[] indices = new int[k];
        
        //calculate soldiers in each row
        //time complexity: O(m*n)
        for(int i = 0; i < rows; i++){
            int j = 0;
            for(; j < cols; j++){
                if(mat[i][j] == 0)
                    break;
            }
            //we could create a new arr[rows] but we can save space
            //by using the 0th index of each row to store the count of ones
            mat[i][0] = j;
        }
        
        //now find the k weakest rows one by one
        //time complexity: O(k*m)
        //Note: count of ones in each row are stored in
        //0th index of each row
        for(int i = 0; i < k; i++){
            int weak = mat[0][0];
            for(int j = 0; j < rows; j++){
                if(mat[j][0] < weak){
                    weak = mat[j][0];
                    indices[i] = j;
                }
            }
            mat[indices[i]][0] = Integer.MAX_VALUE;
        }
        
        return indices;
    }
}
